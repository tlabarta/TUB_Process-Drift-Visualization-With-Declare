{"version":3,"sources":["components/AppLogo/logo.jpeg","context/appContext.tsx","apiService.ts","AppHeader.tsx","components/AppLogo/index.tsx","components/Empty/index.tsx","components/UploadComponent/index.tsx","components/ToolsComponent/index.tsx","components/AlgorithmResultComponent/ErraticMeasureSlider.tsx","components/AlgorithmResultComponent/SpreadConstraintsSlider.tsx","components/AlgorithmResultComponent/index.tsx","AppMainSection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ColorTheme","TypeConstr","AppContext","createContext","state","dispatch","displayName","reducer","action","type","payload","defined","algorithmResult","algorithmSliceIndex","undefined","index","algorithmLoading","loading","wrappedDispatch","console","log","AppContextProvider","children","useReducer","Provider","value","API_URL","generateGetURLWithParams","path","params","url","URL","search","URLSearchParams","Object","entries","reduce","acc","key","cleanUpParams","toString","makeDriftMap","fetch","then","response","json","makeStationarityTest","path_to_stationarity","res","text","parse","skipEmptyLines","data","errors","length","slice","catch","error","makeSpreadOfConstraints","makeAutocorrelationPlots","makeEDFG","AppHeader","useState","edfgLoading","setEdfgLoading","className","Title","level","Consumer","getEdfgHandler","a","session_id","logName","edfgs","paths_to_edfgs","erraticMeasureData","onChange","defaultValue","map","elem","Option","onClick","disabled","AppLogo","spin","size","width","height","src","logo","alt","style","EmptyComponent","description","image","UploadComponent","useContext","setLoading","handleSubmitForm","file","onSuccess","onError","formData","FormData","append","body","method","accept","name","customRequest","UploadOutlined","getDefaultMark","ToolsComponent","collapsed","toggleSider","onAfterChangeSlider","onCheckboxChange","event","target","checked","onRadioChange","onStartAlgorithm","spread_constraints","stationarityTestResult","path_to_erratic_measure","autocorrelationPlots","paths_to_autocorrelation","Sider","collapsible","onCollapse","SettingTwoTone","opacity","pointerEvents","span","title","color","QuestionCircleOutlined","min","subL_min","max","subL_max","subL_default","marks","onAfterChange","sliBy_min","sliBy_max","sliBy_default","cluCut_min","cluCut_max","cluCut_default","Group","colorTheme","colorTheme_default","theme","typeConstr","typeConstr_default","driftAll","noSort","margin","ErraticMeasureSlider","selected","cluster_em","maxEm","useMemo","Math","toFixed","currentEm","1","step","tooltipVisible","tooltipPlacement","SpreadConstraintsSlider","0","AlgorithmResultComponent","path_to_driftmap","paths_to_drift_plots","pValue","pValueText","offset","Text","Paragraph","AppMainSection","Content","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e255214d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.64629744.jpeg\";","import React, { FC, createContext, useReducer } from \"react\";\n\nenum ColorTheme {\n  plasma = \"plasma\",\n  bw = \"bw\",\n  PiYG = \"PiYG\",\n}\n\nenum TypeConstr {\n  plasma = \"confidence\",\n  bw = \"support\",\n  PiYG = \"interestF\",\n}\n\nexport type TAppContextState = {\n  session_id?: string;\n  cluCut_default?: number;\n  cluCut_max?: number;\n  cluCut_min?: number;\n  colorTheme?: ColorTheme[];\n  colorTheme_default?: ColorTheme;\n  driftAll?: boolean;\n  noSort?: boolean;\n  sliBy_default?: number;\n  sliBy_max?: number;\n  sliBy_min?: number;\n  subL_default?: number;\n  subL_max?: number;\n  subL_min?: number;\n  typeConstr?: TypeConstr[];\n  typeConstr_default?: TypeConstr;\n  defined?: {\n    cluCut?: number;\n    sliBy?: number;\n    subL?: number;\n    driftAll?: boolean;\n    noSort?: boolean;\n    colorTheme?: ColorTheme;\n    typeConstr?: TypeConstr;\n  };\n  algorithmResult?: TAlgorithmResult;\n  algorithmSliceIndex?: number;\n  algorithmLoading?: boolean;\n};\n\ntype TAlgorithmResult = {\n  path_to_driftmap: string;\n  erraticMeasureData: Array<Array<string>>;\n  paths_to_drift_plots: Array<string>;\n  spread_constraints: string;\n  [key: string]: any;\n};\n\ntype TStoreAction = { type: string; payload?: { [key: string]: any } };\nexport type TDispatchType = React.Dispatch<TStoreAction>;\n\nexport const AppContext = createContext<{\n  state: TAppContextState;\n  dispatch: TDispatchType;\n}>({\n  state: {},\n  dispatch: () => null,\n});\nAppContext.displayName = \"AppContext\";\n\nexport const SET_SESSION_ACTION = \"SET_SESSION_ACTION\";\nexport const UPDATE_SESSION_ACTION = \"UPDATE_SESSION_ACTION\";\nexport const UPDATE_DEFINED_PARAM_ACTION = \"UPDATE_DEFINED_PARAM_ACTION\";\nexport const SET_ALGORITHM_RESULT = \"SET_ALGORITHM_RESULT\";\nexport const RESET_ALGORITHM_RESULT = 'RESET_ALGORITHM_RESULT';\nexport const SET_ALGORITHM_SLICE_INDEX = \"SET_ALGORITHM_SLICE_INDEX\";\nexport const SET_ALGORITHM_LOADING = 'SET_ALGORITHM_LOADING';\n\nconst reducer = (\n  state: TAppContextState,\n  action: TStoreAction\n): TAppContextState => {\n  switch (action.type) {\n    case SET_SESSION_ACTION: {\n      return {\n        ...state,\n        ...action.payload,\n      };\n    }\n\n    case UPDATE_DEFINED_PARAM_ACTION: {\n      return {\n        ...state,\n        defined: {\n          ...state.defined,\n          ...action.payload,\n        },\n      };\n    }\n\n    case SET_ALGORITHM_RESULT: {\n      return {\n        ...state,\n        algorithmResult: action.payload as TAlgorithmResult,\n        algorithmSliceIndex: 0,\n      };\n    }\n\n    case RESET_ALGORITHM_RESULT: {\n      return {\n        ...state,\n        algorithmResult: undefined,\n        algorithmSliceIndex: undefined,\n      };\n    }\n\n    case SET_ALGORITHM_SLICE_INDEX: {\n      return {\n        ...state,\n        algorithmSliceIndex: action.payload?.index as number,\n      }\n    }\n\n    case SET_ALGORITHM_LOADING: {\n      return {\n        ...state,\n        algorithmLoading: action.payload?.loading,\n      }\n    }\n\n    default:\n      return state;\n  }\n};\n\nconst wrappedDispatch = (dispatch: React.Dispatch<any>) => (\n  action: TStoreAction\n) => {\n  console.log(\"DISPATCH:\", action);\n  dispatch(action);\n};\n\nexport const AppContextProvider: FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, {});\n\n  console.log({ state });\n\n  return (\n    <AppContext.Provider value={{ state, dispatch: wrappedDispatch(dispatch) }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n","import { parse, ParseResult } from \"papaparse\";\n\nexport const API_URL = \"https://processdrift.ai.wu.ac.at\";\n// const API_URL = 'http://127.0.0.1:5000';\n\nconst cleanUpParams = (params: { [key: string]: any }) =>\n  Object.entries(params).reduce((acc: { [key: string]: any }, [key, value]) => {\n    if (value) {\n      acc[key] = value;\n    }\n\n    return acc;\n  }, {});\n\nconst generateGetURLWithParams = (\n  path: string,\n  params?: { [key: string]: any }\n): string => {\n  let url = new URL(`${API_URL}${path}`);\n  url.search = new URLSearchParams({\n    ...(params ? cleanUpParams(params) : {}),\n  }).toString();\n\n  return url.toString();\n};\n\nexport const uploadFile = (body: FormData) =>\n  fetch(`${API_URL}/uploadFile`, {\n    method: \"POST\",\n    body,\n  })\n    .then((response) => response.json())\n    .catch(console.error);\n\nexport const makeDriftMap = (params: {\n  logName: string;\n  [key: string]: any;\n}) => {\n  return fetch(\n    generateGetURLWithParams(\"/makeDriftMap\", params)\n  ).then((response) => response.json());\n};\n\nexport const parseErraticMeasureCsv = (path: string) =>\n  fetch(`${API_URL}${path}`)\n    .then((response) => response.text())\n    .then((res: string) =>\n      parse<string>(res, {\n        skipEmptyLines: true,\n      })\n    )\n    .then(({ data, errors }: ParseResult<string>) => {\n      if (errors.length > 0) {\n        throw errors;\n      }\n      console.log({ data });\n\n      return data.slice(1);\n    })\n    .catch(console.error);\n\nexport const makeStationarityTest = (params: {\n  logName: string;\n  [key: string]: any;\n}) =>\n  fetch(generateGetURLWithParams(\"/makeStationarityTest\", params))\n    .then((response) => response.json())\n    .then(({ path_to_stationarity }) =>\n      fetch(`${API_URL}${path_to_stationarity}`)\n    )\n    .then((res) => res.text())\n    .then((res: string) =>\n      parse<string>(res, {\n        skipEmptyLines: true,\n      })\n    )\n    .then(({ data, errors }: ParseResult<string>) => {\n      if (errors.length > 0) {\n        throw errors;\n      }\n      console.log({ data });\n\n      return data.slice(1);\n    })\n    .catch(console.error);\n\nexport const makeSpreadOfConstraints = (params: {\n  logName: string;\n  [key: string]: any;\n}) => {\n  return fetch(\n    generateGetURLWithParams(\"/makeSpreadOfConstraints\", params)\n  ).then((response) => response.json());\n};\n\nexport const makeAutocorrelationPlots = (params: {\n  logName: string;\n  [key: string]: any;\n}) =>\n  fetch(\n    generateGetURLWithParams(\"/makeAutocorrelationPlots\", params)\n  ).then((response) => response.json());\n\nexport const makeEDFG = (params: { logName: string; [key: string]: any }) =>\n  fetch(\n    generateGetURLWithParams(\"/makeEDFG\", params)\n  ).then((response) => response.json());\n","import React, { useState } from \"react\";\nimport { Typography, Select, Button } from \"antd\";\n\nimport {\n  AppContext,\n  SET_ALGORITHM_SLICE_INDEX,\n  SET_ALGORITHM_RESULT,\n} from \"./context/appContext\";\nimport { makeEDFG } from \"./apiService\";\n\nexport const AppHeader = () => {\n  const [edfgLoading, setEdfgLoading] = useState(false);\n  return (\n    <header className=\"App-header\">\n      <Typography.Title level={1}>\n        Visual drift detection for sequence data analysis system\n      </Typography.Title>\n      <AppContext.Consumer>\n        {({ state, dispatch }) => {\n          const selectAlgorithmSliceIndex = (index: number) =>\n            dispatch({\n              type: SET_ALGORITHM_SLICE_INDEX,\n              payload: { index },\n            });\n          const getEdfgHandler = async () => {\n            if (state.session_id) {\n              setEdfgLoading(true);\n              const params = {\n                logName: state.session_id,\n                ...state.defined,\n              };\n              const { paths_to_edfgs: edfgs } = await makeEDFG(params);\n\n              dispatch({\n                type: SET_ALGORITHM_RESULT,\n                payload: {\n                  ...state.algorithmResult,\n                  edfgs,\n                },\n              });\n              setEdfgLoading(false);\n            }\n          };\n          if (!state.algorithmResult) {\n            return null;\n          }\n\n          const {\n            algorithmResult: { edfgs, erraticMeasureData },\n            algorithmSliceIndex = 0,\n          } = state;\n\n          return (\n            <div>\n              <Select onChange={selectAlgorithmSliceIndex} defaultValue={0}>\n                {erraticMeasureData.map((elem, index) => (\n                  <Select.Option value={index}>Section {index}</Select.Option>\n                ))}\n              </Select>\n\n              {!edfgs?.[algorithmSliceIndex] && (\n                <Button\n                  onClick={getEdfgHandler}\n                  type=\"primary\"\n                  loading={edfgLoading}\n                  disabled={edfgLoading}\n                >\n                  Get EDFG\n                </Button>\n              )}\n            </div>\n          );\n        }}\n      </AppContext.Consumer>\n    </header>\n  );\n};\n","import React from \"react\";\n\nimport logo from \"./logo.jpeg\";\nimport \"./AppLogo.css\";\n\nexport const AppLogo = ({\n  spin = false,\n  size = { width: \"40px\", height: \"40px\" },\n}) => {\n  return (\n    <img\n      src={logo}\n      alt=\"Logo\"\n      className={`App-logo ${spin ? \"spin\" : \"\"}`}\n      style={{ ...size }}\n    />\n  );\n};\n","import React, { FC } from 'react';\nimport { Empty } from \"antd\";\n\nimport { AppLogo } from \"../AppLogo\";\nimport './Empty.css'\n\nexport const EmptyComponent: FC<{\n  loading?: boolean,\n  description: React.ReactNode,\n}> = ({loading = false, children, description}) => {\n  return <div className=\"Empty-area\">\n      <Empty\n        description={description}\n        image={<AppLogo size={{ width: \"100px\", height: \"100px\" }} spin={loading} />}\n      >\n        {children}\n      </Empty>\n    </div>\n}","import React, { useState, useContext } from \"react\";\nimport { Upload, Button, Typography } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\n\nimport { uploadFile } from \"../../apiService\";\nimport { AppContext, SET_SESSION_ACTION } from \"../../context/appContext\";\nimport { EmptyComponent } from \"../Empty\";\n\nexport const UploadComponent = () => {\n  const { dispatch, state } = useContext(AppContext);\n  const [loading, setLoading] = useState<boolean>(false);\n\n  if (state.session_id) {\n    return null;\n  }\n\n  const handleSubmitForm = async ({\n    file,\n    onSuccess,\n    onError,\n  }: {\n    file: File;\n    onSuccess: (response: object, file: File) => void;\n    onError: (event: Error, body?: Object) => void;\n  }) => {\n    if (file) {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      try {\n        const response = await uploadFile(formData);\n        dispatch({ type: SET_SESSION_ACTION, payload: response });\n        onSuccess(response, file);\n      } catch (error) {\n        console.log(error);\n        onError(error);\n      }\n      setLoading(false);\n    }\n  };\n\n  return (\n    <EmptyComponent\n      loading={loading}\n      description={\n        <Typography.Title level={2}>\n          The technique that supports the discovery of process drifts!\n        </Typography.Title>\n      }\n    >\n      <Upload accept=\".xes\" name=\"file\" customRequest={handleSubmitForm}>\n        <Button\n          loading={loading}\n          size=\"large\"\n          type=\"primary\"\n          disabled={loading}\n        >\n          <UploadOutlined /> Click to upload a <b> .xes </b> file\n        </Button>\n      </Upload>\n    </EmptyComponent>\n  );\n};\n","import React, { FC, useContext, useState, useEffect } from \"react\";\nimport {\n  Slider,\n  Col,\n  Checkbox,\n  Radio,\n  Button,\n  Divider,\n  Row,\n  Tooltip,\n  Layout,\n} from \"antd\";\nimport { CheckboxChangeEvent } from \"antd/lib/checkbox\";\nimport { SliderValue } from \"antd/lib/slider\";\nimport { RadioChangeEvent } from \"antd/lib/radio\";\nimport { QuestionCircleOutlined, SettingTwoTone } from \"@ant-design/icons\";\nimport {\n  AppContext,\n  UPDATE_DEFINED_PARAM_ACTION,\n  SET_ALGORITHM_RESULT,\n  SET_ALGORITHM_LOADING,\n  RESET_ALGORITHM_RESULT,\n} from \"../../context/appContext\";\n\nimport {\n  makeDriftMap,\n  parseErraticMeasureCsv,\n  makeSpreadOfConstraints,\n  makeStationarityTest,\n  makeAutocorrelationPlots,\n} from \"../../apiService\";\n\nconst getDefaultMark = (defaultValue: number = 0) => ({\n  [defaultValue]: defaultValue,\n});\n\nexport const ToolsComponent: FC = () => {\n  const { state, dispatch } = useContext(AppContext);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [collapsed, toggleSider] = useState<boolean>(false);\n\n  if (!state.session_id) {\n    return null;\n  }\n\n  const onAfterChangeSlider = (key: string) => (value: SliderValue) => {\n    dispatch({ type: UPDATE_DEFINED_PARAM_ACTION, payload: { [key]: value } });\n  };\n\n  const onCheckboxChange = (key: string) => (event: CheckboxChangeEvent) => {\n    dispatch({\n      type: UPDATE_DEFINED_PARAM_ACTION,\n      payload: { [key]: event.target.checked },\n    });\n  };\n\n  const onRadioChange = (key: string) => (event: RadioChangeEvent) => {\n    dispatch({\n      type: UPDATE_DEFINED_PARAM_ACTION,\n      payload: { [key]: event.target.value },\n    });\n  };\n\n  const onStartAlgorithm = async () => {\n    if (state.session_id) {\n      setLoading(true);\n      dispatch({ type: SET_ALGORITHM_LOADING, payload: { loading: true } });\n      dispatch({ type: RESET_ALGORITHM_RESULT });\n      try {\n        const params = { logName: state.session_id, ...state.defined };\n        const algorithmResult = await makeDriftMap(params);\n        const { spread_constraints } = await makeSpreadOfConstraints(params);\n        const stationarityTestResult = await makeStationarityTest(params);\n        const erraticMeasureData = await parseErraticMeasureCsv(\n          algorithmResult.path_to_erratic_measure\n        );\n        const {\n          paths_to_autocorrelation: autocorrelationPlots,\n        } = await makeAutocorrelationPlots(params);\n\n        dispatch({\n          type: SET_ALGORITHM_RESULT,\n          payload: {\n            ...algorithmResult,\n            erraticMeasureData,\n            spread_constraints,\n            stationarityTestResult,\n            autocorrelationPlots,\n          },\n        });\n        toggleSider(true);\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n        dispatch({ type: SET_ALGORITHM_LOADING, payload: { loading: false } });\n      }\n    }\n  };\n\n  return (\n    <Layout.Sider\n      collapsible\n      collapsed={collapsed}\n      onCollapse={toggleSider}\n      width={350}\n      className=\"App-sider\"\n    >\n      {collapsed && (\n        <SettingTwoTone style={{ width: \"50px\", height: \"50px\" }} />\n      )}\n      <div\n        style={{\n          opacity: collapsed ? 0 : 1,\n          pointerEvents: collapsed ? \"none\" : \"inherit\",\n        }}\n      >\n        <Row>\n          {/* <Tooltip title=\"Win size\" color=\"pink\"> */}\n          <Col span={24}>\n            <Tooltip\n              title=\"the size of the sliding window for mining declare constraints\"\n              color={\"green\"}\n            >\n              <Divider>\n                Win size{\" \"}\n                <sup>\n                  <QuestionCircleOutlined />\n                </sup>\n              </Divider>\n            </Tooltip>\n          </Col>\n          <Col span={24}>\n            <Slider\n              min={state.subL_min}\n              max={state.subL_max}\n              defaultValue={state.subL_default}\n              marks={getDefaultMark(state.subL_default)}\n              onAfterChange={onAfterChangeSlider(\"subL\")}\n            />\n          </Col>\n          {/* </Tooltip> */}\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Tooltip\n              title=\"this parameter sets the number of event sequences will be skipped with each new window. this number shouldn't be larger than the Win size\"\n              color={\"pink\"}\n              key={\"?\"}\n            >\n              <Divider>\n                Slide Size\n                <sup>\n                  <QuestionCircleOutlined />\n                </sup>\n              </Divider>\n            </Tooltip>\n          </Col>\n          <Col span={24}>\n            <Slider\n              min={state.sliBy_min}\n              max={state.sliBy_max}\n              defaultValue={state.sliBy_default}\n              marks={getDefaultMark(state.sliBy_default)}\n              onAfterChange={onAfterChangeSlider(\"sliBy\")}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Tooltip\n              title=\"this parameter affects the hierarchical clustering algorithm to determine the number of clusters, \n                          and there fore number of changing behaviours. the larger the number the less clusters will be found \"\n              color={\"orange\"}\n              key={\"?\"}\n            >\n              <Divider>\n                Cut Threshold{\" \"}\n                <sup>\n                  <QuestionCircleOutlined />\n                </sup>\n              </Divider>\n            </Tooltip>\n          </Col>\n          <Col span={24}>\n            <Slider\n              min={state.cluCut_min}\n              max={state.cluCut_max}\n              defaultValue={state.cluCut_default}\n              marks={getDefaultMark(state.cluCut_default)}\n              onAfterChange={onAfterChangeSlider(\"cluCut\")}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Tooltip\n              title=\"choose the color scheme for the Drift Map visualizatoin. All of the options should be colorblind friendly. Read more about color schemas at https://matplotlib.org/examples/color/colormaps_reference.html\"\n              color={\"volcano\"}\n              key={\"?\"}\n            >\n              <Divider>\n                Color scheme{\" \"}\n                <sup>\n                  <QuestionCircleOutlined />\n                </sup>\n              </Divider>\n            </Tooltip>\n          </Col>\n          <Col span={24}>\n            <Radio.Group\n              defaultValue={\n                state.defined?.colorTheme || state.colorTheme_default\n              }\n              onChange={onRadioChange(\"colorTheme\")}\n            >\n              {state.colorTheme?.map((theme) => (\n                <Radio value={theme} key={theme}>\n                  {theme}\n                </Radio>\n              ))}\n            </Radio.Group>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Tooltip\n              title=\"Choose between three types of measures on Declare constraints\"\n              color={\"lime\"}\n              key={\"?\"}\n            >\n              <Divider>\n                Type of constraint{\" \"}\n                <sup>\n                  <QuestionCircleOutlined />\n                </sup>\n              </Divider>\n            </Tooltip>\n          </Col>\n          <Col span={24}>\n            <Radio.Group\n              defaultValue={\n                state.defined?.typeConstr || state.typeConstr_default\n              }\n              onChange={onRadioChange(\"typeConstr\")}\n            >\n              {state.typeConstr?.map((type) => (\n                <Radio value={type} key={type}>\n                  {type}\n                </Radio>\n              ))}\n            </Radio.Group>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Divider>Additional parameters</Divider>\n          </Col>\n          <Col span={24}>\n            <Tooltip\n              title=\"Click in driftAll if you want find sudden drifts in all separate clusters of behaviour. Leave it if you want to find sudden drifts on the whole dataset.\"\n              color={\"geekblue\"}\n              key={\"?\"}\n            >\n              <Checkbox\n                checked={state.defined?.driftAll ?? state.driftAll}\n                onChange={onCheckboxChange(\"driftAll\")}\n              >\n                drift all{\" \"}\n                <sup>\n                  <QuestionCircleOutlined />\n                </sup>\n              </Checkbox>\n            </Tooltip>\n            <br />\n            <Tooltip\n              title=\"Click in noSort if you do not want to sort constrants in clusters by similarity for the drift map. This only influences the visul representation\"\n              color={\"geekblue\"}\n              key={\"?\"}\n            >\n              <Checkbox\n                checked={state.defined?.noSort ?? state.noSort}\n                onChange={onCheckboxChange(\"noSort\")}\n              >\n                no sort{\" \"}\n                <sup>\n                  <QuestionCircleOutlined />\n                </sup>\n              </Checkbox>\n            </Tooltip>\n          </Col>\n        </Row>\n        <Row>\n          <Col span={24}>\n            <Button\n              type=\"primary\"\n              disabled={loading}\n              loading={loading}\n              onClick={onStartAlgorithm}\n              style={{ margin: \"20px 0\" }}\n            >\n              Start algorithm\n            </Button>\n          </Col>\n        </Row>\n      </div>\n    </Layout.Sider>\n  );\n};\n","import React, { FC, useMemo } from \"react\";\nimport { Slider } from \"antd\";\n\nexport const ErraticMeasureSlider: FC<{\n  selected: number;\n  data: Array<Array<string>>;\n}> = ({ selected, data }) => {\n  const [, min, cluster_em] = data[selected];\n  const maxEm = useMemo<number>(() => {\n    return +(Math.max(...data.map(([, , cluster_em]) => +cluster_em)) / +min).toFixed(3);\n  }, [data, min]);\n  const currentEm: number = +(+cluster_em / +min).toFixed(3);\n\n  return (\n    <Slider\n      disabled\n      marks={{\n        1: 1,\n        [maxEm]: maxEm,\n      }}\n      min={1}\n      max={maxEm}\n      step={0.001}\n      tooltipVisible\n      value={currentEm}\n      tooltipPlacement=\"right\"\n    />\n  );\n};\n","import React, { FC } from \"react\";\nimport { Slider } from \"antd\";\n\nexport const SpreadConstraintsSlider: FC<{\n  value: string;\n}> = ({ value }) => {\n  return (\n    <Slider\n      disabled\n      marks={{\n        0: 0,\n        1: 1,\n      }}\n      min={0}\n      max={1}\n      step={0.001}\n      tooltipVisible\n      value={+(+value / 100).toFixed(3)}\n      tooltipPlacement=\"right\"\n    />\n  );\n};\n","import React, { FC, useContext } from \"react\";\n\nimport { Row, Col, Typography } from \"antd\";\nimport { API_URL } from \"../../apiService\";\nimport {\n  AppContext,\n  TAppContextState,\n  TDispatchType,\n} from \"../../context/appContext\";\nimport { EmptyComponent } from \"../Empty\";\n\nimport { ErraticMeasureSlider } from \"./ErraticMeasureSlider\";\nimport { SpreadConstraintsSlider } from \"./SpreadConstraintsSlider\";\nimport \"./styles.css\";\n\nexport const AlgorithmResultComponent: FC = () => {\n  const { state } = useContext<{\n    state: TAppContextState;\n    dispatch: TDispatchType;\n  }>(AppContext);\n  if (state.algorithmLoading || !state.algorithmResult) {\n    return (\n      <EmptyComponent\n        loading={state.algorithmLoading}\n        description={\n          <Typography.Title level={4}>\n            {state.algorithmLoading ? 'Algorithm loading...' : 'Start algorithm to see result!'}\n          </Typography.Title>\n        }\n      />\n    );\n  }\n\n  const {\n    algorithmResult: {\n      path_to_driftmap,\n      erraticMeasureData = [],\n      paths_to_drift_plots = [],\n      spread_constraints,\n      stationarityTestResult,\n      autocorrelationPlots,\n      edfgs,\n    },\n    algorithmSliceIndex = 0,\n  } = state;\n\n  const pValue: number = +stationarityTestResult[algorithmSliceIndex]?.[2];\n  const pValueText: string =\n    pValue > 0.05\n      ? `Incremental drift present, p = ${pValue.toFixed(4)}`\n      : `No incremental drift, p = ${pValue.toFixed(4)}`;\n\n  return (\n    <div>\n      <Row>\n        <Col span={10}>\n          <img\n            src={`${API_URL}${path_to_driftmap}`}\n            alt=\"Drift map\"\n            className=\"image\"\n          />\n        </Col>\n        <Col span={8}>\n          <img\n            className=\"image\"\n            src={`${API_URL}${paths_to_drift_plots[algorithmSliceIndex]}`}\n            alt=\"drift plot\"\n          />\n        </Col>\n        <Col span={5} offset={1}>\n          <img\n            src={`${API_URL}${autocorrelationPlots[algorithmSliceIndex]}`}\n            alt=\"autocorrelation plots\"\n            className=\"image\"\n          />\n          <Typography.Text>Erratic measure</Typography.Text>\n          <ErraticMeasureSlider\n            selected={algorithmSliceIndex}\n            data={erraticMeasureData}\n          />\n          <Typography.Text>Spread of constraints</Typography.Text>\n          <SpreadConstraintsSlider value={spread_constraints} />\n          <Typography.Paragraph>{pValueText}</Typography.Paragraph>\n        </Col>\n      </Row>\n      <Row>\n        {edfgs?.[algorithmSliceIndex] && (\n          <Col span={24}>\n            <img\n              src={`${API_URL}${edfgs[algorithmSliceIndex]}`}\n              alt=\"EDGF\"\n              className=\"image\"\n            />\n          </Col>\n        )}\n      </Row>\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport { Layout } from \"antd\";\n\nimport { AppContext } from \"./context/appContext\";\n\nimport { UploadComponent } from \"./components/UploadComponent\";\nimport { ToolsComponent } from \"./components/ToolsComponent\";\nimport { AlgorithmResultComponent } from \"./components/AlgorithmResultComponent\";\nimport \"./App.css\";\n\nexport const AppMainSection = () => (\n  <main>\n    <AppContext.Consumer>\n      {({ state }) => {\n        if (!state.session_id) {\n          return <UploadComponent />;\n        }\n\n        return (\n          <Layout>\n            <ToolsComponent />\n            <Layout.Content>\n              <AlgorithmResultComponent />\n            </Layout.Content>\n          </Layout>\n        );\n      }}\n    </AppContext.Consumer>\n  </main>\n);\n","import React from \"react\";\nimport \"antd/dist/antd.css\";\n\nimport { AppHeader } from \"./AppHeader\";\nimport { AppMainSection } from \"./AppMainSection\";\n\nimport {\n  AppContextProvider,\n} from \"./context/appContext\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <AppContextProvider>\n      <div className=\"App\">\n        <AppHeader />\n        <AppMainSection />\n      </div>\n    </AppContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}